@startuml
actor "Sales Clerk" as SC
participant "Presentation<U+226B>\n: OrderDeliveredUI" as presentation
participant "<U+226A>Application<U+226B>\n: OrderDeliveredController" as controller
participant "<U+226A>Service<U+226B>\n: OrderDeliveredService" as service
participant "<U+226A>Persistence<U+226B>\n: PersistenceContext" as context
participant "<U+226A>Factory<U+226B>\nfactory : RepositoryFactory" as factory
database "<U+226A>Repository<U+226B>\norderRepository : Repository" as repository
participant "<U+226A>Domain<U+226B>\norderList : List<Order>" as list
participant "<U+226A>DTO<U+226B>\norderDTOList : List<OrderDTO>" as listDTO
participant "<U+226A>DTO<U+226B>\n : OrderMapper" as mapper
participant "<U+226A>DTO<U+226B>\norderDTO : OrderDTO" as dto
participant "<U+226A>DTO<U+226B>\nselectedOrderDTOList : List<OrderDTO>" as listOrdDTOer
participant "<U+226A>Domain<U+226B>\norder : Order" as orders



SC -> presentation: The Sales Clerk initializes\nthe process of updating the status of the order
activate presentation

presentation -> controller: create
activate controller

controller -> service: create
activate service
service -> context: repositories()
activate context

context -> factory: create
context --> service: factory
deactivate context

service -> factory: orderRepository()
activate factory

factory -> repository: create

factory--> service: orderRepository
deactivate factory
deactivate service
deactivate controller

presentation -> controller: listAllDispatchedOrders()
activate controller

controller -> service: listAllDispatchedOrders()
activate service

service -> repository: getAllDispatchedOrders()
activate repository

repository -> list: create

repository --> service: orderList
deactivate repository

service -> listDTO: create

loop foreach
    service -> list: getNext()
    activate list

    list --> service: order
    deactivate list

    service -> mapper: toDTO(order)
    activate mapper

    mapper -> dto: create

    mapper --> service: orderDTO
    deactivate mapper

    service -> listDTO: add(orderDTO)
    activate listDTO
    deactivate listDTO
end

service --> controller: orderDTOList
deactivate service

controller --> presentation: orderDTOList
deactivate controller

presentation --> SC : The System presents a list of Orders to the \nSales Clerk whose Status are "Preparation"\nand asks the Sales Clerk to choose Orders\n whose Status will be updated to "Delivered";
deactivate presentation

SC -> presentation: The Sales Clerk selects the Orders whose\nStatus are to be updated;
activate presentation

presentation -> controller: updateStatus(selectedOrderDTOList)
activate controller

controller -> service: updateStatusAndPersist(selectedOrderDTOList)
activate service

loop foreach
    service -> listOrdDTOer: getNext()
    activate listOrdDTOer
    listOrdDTOer --> service: orderDTO
    deactivate listOrdDTOer

    service -> mapper: toOrder(orderDTO)
    activate mapper
    mapper --> service: order
    deactivate mapper

    service -> orders: changeStatusToDelivered()
    activate orders
    deactivate orders

    service -> repository: update(order)
    activate repository
    deactivate repository
end

deactivate service
deactivate controller

presentation --> SC : The System updates the Status of the selected Orders\nand informs the Sales Clerk of the operation success;
deactivate presentation

@enduml